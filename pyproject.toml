[project]
name = "hikari-ongaku"
version = "1.0.4"
license = "MIT"
description = "A simple voice library, for hikari."
authors = [{ name = "mplaty", email = "contact@mplaty.com" }]
maintainers = [{ name = "mplaty", email = "contact@mplaty.com" }]
readme = "README.md"
requires-python = ">=3.10.0,<3.14"
dependencies = ["hikari >= 2.3.3", "aiohttp >= 3.11.0"]
keywords = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[dependency-groups]
dev = ["nox[uv] >= 2025.5.0"]
doc = [
    "black >= 25.1.0",
    "mkdocs >= 1.6.0",
    "mkdocs-autorefs >= 1.4.0",
    "mkdocs-material[imaging] >= 9.6.0",
    "mkdocs-material-extensions >= 1.3.0",
    "mkdocstrings-python >= 1.16.0",
    "mkdocstrings >= 0.29.0",
    "Pygments >= 2.19.0",
    "pymdown-extensions >= 10.15.0",
    "PyYAML >= 6.0.0",
    "pyyaml_env_tag >= 1.0.0",
    "Markdown >= 3.7.0",
    "MarkupSafe >= 3.0.0",
    "mergedeep >= 1.3.0",
    "griffe-inherited-docstrings >= 1.1.0",
]
test = [
    "pytest >= 8.3.0",
    "mock >= 5.1.0",
    "orjson >= 3.10.0",
    "pytest-asyncio >= 0.25.0",
    "pytest-aiohttp >= 1.0.0",
]
format = ["ruff >= 0.11.0"]
speedups = [
    "aiohttp[speedups]~=3.11.0",
    "orjson~=3.10.0",
]
injection = [
    "hikari-arc~=2.1",
    "hikari-tanjun~=2.17.0",
]

# Tools configuration --------------------------------------------------

[tool.hatch.build.targets.wheel]
packages = ["ongaku"]

[tool.uv]
required-version = ">=0.6"

[tool.pyright]
pythonVersion = "3.10"
typeCheckingMode = "strict"
reportPrivateUsage = false
reportMissingTypeStubs = true
reportUnnecessaryTypeIgnoreComment = "warning"
reportUninitializedInstanceVariable = "error"
reportShadowedImports = "warning"

[tool.ruff]
extend-exclude = ["examples/*", ".venv/*"]
line-length = 80

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint]
select = [
    "E",
    "F",
    "I",
    "C",
    "N",
    "D2",
    "D3",
    "D415",
    "D417",
    "D418",
    "D419",
    "ASYNC",
    "Q",
    "RSE",
    "SIM",
    "RUF",
]
ignore = ["F405", "F403", "E501", "D205"]
fixable = ["I", "D"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

# Build configure ------------------------------------------------------

[build-system]
requires = ["hatchling >= 1.26"]
build-backend = "hatchling.build"
